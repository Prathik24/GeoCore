FROM nvidia/cuda:12.1.0-cudnn8-devel-ubuntu22.04
LABEL maintainer="Zanskar ML Team"
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED True

RUN apt-get update && apt-get -y install \
    apt-transport-https \ 
    build-essential \
    ca-certificates \
    cmake \
    curl \
    git \
    gnupg \
    libboost-dev \
    libboost-filesystem-dev \
    libboost-system-dev \
    libffi-dev \
    libgdal-dev \
    python3 \
    python3-pip \
    python3.10-venv \
    vim \
    wget

RUN mkdir /modeling
WORKDIR /modeling

# TODO: in the build-python.sh file, reference python3 instead of python. Maybe create an alias in the dockerfile
RUN git clone --recursive https://github.com/microsoft/LightGBM
RUN mkdir /modeling/LightGBM/build
RUN cd /modeling/LightGBM/build && \
    cmake -DUSE_GPU=1 -DUSE_CUDA=1 -DOpenCL_LIBRARY=/usr/local/cuda/lib64/libOpenCL.so -DOpenCL_INCLUDE_DIR=/usr/local/cuda/include/ .. && \
    make -j$(nproc)
RUN ln -s /usr/bin/python3 /usr/bin/python 
RUN cd /modeling/LightGBM/ && \
    sh ./build-python.sh install --precompile
# https://github.com/microsoft/LightGBM/issues/586
RUN mkdir -p /etc/OpenCL/vendors && \ 
    echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd

# Install CLI
RUN echo "deb [signed-by=/usr/share/keyrings/cloud.google.asc] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
RUN curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | tee /usr/share/keyrings/cloud.google.asc
RUN apt-get update && apt-get -y install google-cloud-cli

RUN curl -sSL https://install.python-poetry.org | python3 -
ENV PATH="/root/.local/bin:$PATH"
COPY configs /modeling/configs
COPY MLGEOCORE_PUBLIC /modeling/modeling/
COPY apps /modeling/apps/

COPY pyproject.toml /modeling/

COPY README.md /modeling

# Project initialization:
RUN poetry config virtualenvs.create false \
  && poetry install
# this overwrites the lightgbm path
RUN poetry add /modeling/LightGBM/dist/lightgbm-4.2.0.99.tar.gz

# Fix for the skopt issue with numpy. 
RUN sed -i 's/np.int/int/g'  /usr/local/lib/python3.10/dist-packages/skopt/space/transformers.py
COPY entry-point.sh ./entry-point.sh

EXPOSE 8080

ENTRYPOINT ["/usr/bin/env", "bash", "entry-point.sh"]